#!/usr/bin/env python3
#-------------------------------------------------------------------------------
#  Copyright (c) 2015 Jason Lynch <jason@calindora.com>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#-------------------------------------------------------------------------------

import os
import re
import subprocess
import sys

import mutagen
import xdg.BaseDirectory

import jeff.library


#-------------------------------------------------------------------------------
# Classes
#-------------------------------------------------------------------------------

class JeffSort(object):
	def __init__(self):
		self._library = jeff.library.Library(os.path.join(xdg.BaseDirectory.save_config_path('jeff'), 'library.sqlite'))
		self._db = self._library._db

	#---------------------------------------------------------------------------
	# Public Methods
	#---------------------------------------------------------------------------

	def run(self, full=False):
		rank = 1

		for index, track_ids in enumerate(self._library.get_ranked_tracks()):
			if not full and len(track_ids) > 1:
				break

			for track_id in sorted(track_ids):
				files = sorted([(self._get_file_score(f), f) for f in self._db.execute('SELECT * FROM tracks t, files f WHERE t.id = ? AND t.id = f.track_id;', (track_id,)).fetchall()], reverse=True, key=lambda v: v[0])

				if len(files) > 0:
					yield (index + 1, rank, files[0][1])

			rank += len(track_ids)

	#---------------------------------------------------------------------------
	# Private Methods
	#---------------------------------------------------------------------------

	def _get_file_score(self, f):
		return os.path.getsize(f['path'])

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------


def format_size(size):
	if size < 1024:
		return ('{} B'.format(size))
	elif size < 1048576:
		return ('{:.2f} KiB'.format(size / 1024))
	elif size < 1024 * 1024 * 1024:
		return ('{:.2f} MiB'.format(size / 1024 / 1024))
	elif size < 1024 ** 4:
		return ('{:.2f} GiB'.format(size / 1024 / 1024 / 1024))


def sanitize(data):
	data = data.replace('"', '___DQ___')
	data = data.replace('*', '___AS___')
	data = data.replace('?', '___QM___')
	data = data.replace('<', '___LA___')
	data = data.replace('>', '___RA___')
	data = data.replace('|', '___PI___')
	data = data.replace(':', '___CO___')
	data = data.replace('$', '___ST___')
	data = data.replace('&', '___AM___')
	data = data.replace('./', '___FP___/')

	if data[-1] == '.':
		data = data[:-1] + '___FP___'

	if data[-1] == ' ':
		data = data[:-1] + '___FS___'

	return data


def desanitize(data):
	data = data.replace('___DQ___', '"')
	data = data.replace('___AS___', '*')
	data = data.replace('___AM___', '&')
	data = data.replace('___QM___', '?')
	data = data.replace('___LA___', '<')
	data = data.replace('___RA___', '>')
	data = data.replace('___PI___', '|')
	data = data.replace('___CO___', ':')
	data = data.replace('___ST___', '$')
	data = data.replace('___FP___', '.')
	data = data.replace('___FS___', ' ')
	return data


#-------------------------------------------------------------------------------
# Main Execution
#-------------------------------------------------------------------------------

if __name__ == '__main__':
	if len(sys.argv) < 4:
		print('USAGE: {} <mode> <maxsize> <base-path> <path>'.format(sys.argv[0]))
		exit(1)

	sorter = JeffSort()
	mode = sys.argv[1]
	max_size = int(sys.argv[2]) * 1048576
	base_directory = sys.argv[3]
	target_directory = sys.argv[4]

	current_size = 0
	stored_files = []
	artists = {}
	count = 0
	length = 0.0

	updated = {}
	new = {}
	deleted = {}

	for rank, true_rank, f in sorter.run(mode in ['export', 'print']):
		if mode == 'print':
			print('{:6} {}'.format(rank, f['path']))
			continue

		if mode == 'artists':
			tags = mutagen.File(f['path'], easy=True)

			if not tags:
				continue

			if not tags['artist']:
				continue

			artist = tags['artist'][0]

			if ' feat. ' in artist:
				artist = artist.split(' feat. ')[0]

			if ' with ' in artist:
				artist = artist.split(' with ')[0]

			try:
				if artist not in artists:
					artists[artist] = (0, 0)

				artists[artist] = (artists[artist][0] + 1, artists[artist][1] + rank)
			except KeyError as e:
				pass

			continue

		if current_size > max_size:
			break

		if os.path.exists(f['path']):
			matches = re.match('{}/(.*)/([^/]*)\.([^.]*)'.format(base_directory), f['path'])

			directory = matches.group(1)
			filename = matches.group(2)
			extension = matches.group(3)

			tags = mutagen.File(f['path'], easy=True)
			length += tags.info.length
			count += 1

			file_data = subprocess.check_output(['file', f['path']]).decode('utf-8')
			encode = False

			if extension == 'flac' or 'layer II,' in file_data:
				encode = True
				new_filename = os.path.join(target_directory, directory, '{}.ogg'.format(filename))
			else:
				new_filename = os.path.join(target_directory, directory, '{}.{}'.format(filename, extension))

			if not os.path.isdir(os.path.join(target_directory, sanitize(directory))):
				os.makedirs(os.path.join(target_directory, sanitize(directory)))

			if os.path.exists(sanitize(new_filename)) and os.path.getmtime(sanitize(new_filename)) >= os.path.getmtime(f['path']):
				current_size += os.path.getsize(sanitize(new_filename))
				stored_files.append(sanitize(new_filename))

				new_tags = mutagen.File(sanitize(new_filename), easy=True)
				matches = re.search('((?P<rank>[0-9]*): )?(?P<title>.*)', new_tags['title'][0])
				if matches.group('rank') != '{:04d}'.format(rank):
					updated[new_filename] = (int(matches.group('rank')), int(rank))
				new_tags['title'] = '{:04d}: {}'.format(rank, matches.group('title'))
				new_tags.save()

				continue

			if encode:
				new[sanitize(new_filename)] = (True, f['path'], int(rank))

				if extension == 'flac':
					subprocess.call(['oggenc', '-q3', '--output={}'.format(sanitize(new_filename)), f['path']])
				else:
					subprocess.call(['sox', f['path'], sanitize(new_filename)])
			else:
				new[sanitize(new_filename)] = (False, f['path'], int(rank))
				subprocess.call(['cp', '-a', f['path'], sanitize(new_filename)])

			new_tags = mutagen.File(sanitize(new_filename), easy=True)
			new_tags['title'] = '{:04d}: {}'.format(rank, new_tags['title'][0])
			new_tags.save()

			current_size += os.path.getsize(sanitize(new_filename))
			stored_files.append(sanitize(new_filename))

	if mode == 'print':
		pass
	elif mode == 'artists':
		ranks = [(key, value[1] / value[0], value[0]) for key, value in artists.items()]

		for entry in sorted(ranks, key=lambda x: x[1]):
			if entry[2] > 5:
				print('{:50} {:.3f}'.format(entry[0], entry[1]))

		print()

		for entry in sorted(ranks, key=lambda x: x[2], reverse=True):
			print('{:50} {}'.format(entry[0], entry[2]))
	else:
		for root, dirs, files in os.walk(target_directory, topdown=False):
			if root.endswith('.sync'):
				continue

			for filename in files:
				if filename in ['playlist.m3u', '.stfolder']:
					continue

				if os.path.join(root, filename) not in stored_files:
					deleted[filename] = True
					os.remove(os.path.join(root, filename))

			for dir in dirs:
				try:
					os.rmdir(os.path.join(root, dir))
					deleted[dir] = True
				except OSError:
					pass

		print()
		print('Summary:')
		print()
		print('Changed Files')
		print('-------------')

		for filename, (old_rank, new_rank) in sorted(updated.items(), key=lambda x: abs(x[1][1] - x[1][0])):
			old_rank, new_rank = updated[filename]
			print('{:4d} -> {:4d}: {:50}'.format(old_rank, new_rank, filename))

		print()
		print('New Files')
		print('---------')

		for filename in sorted(new.keys()):
			encoded, original_filename, rank = new[filename]
			print('{:7}: {:4d} {:50}'.format('Encoded' if encoded else 'Copied', rank, filename))

		print()
		print('Deleted Files')
		print('-------------')

		for filename in sorted(deleted.keys()):
			print(filename)

		print()
		print('Stats')
		print('-----')
		print('Number of Tracks: {}'.format(count))
		print('Total Length: {}:{:02}:{:02}'.format(int(length / 3600), int(length / 60) % 60, int(length) % 60))
		print('Total filesize: {}'.format(format_size(current_size)))
