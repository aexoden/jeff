#!/usr/bin/env python3
#-------------------------------------------------------------------------------
#  Copyright (c) 2015 Jason Lynch <jason@calindora.com>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#-------------------------------------------------------------------------------

import os
import re
import shutil
import subprocess
import sys

import mutagen
import xdg.BaseDirectory

import jeff.library


#-------------------------------------------------------------------------------
# Classes
#-------------------------------------------------------------------------------

class JeffSort(object):
	def __init__(self):
		self._library = jeff.library.Library(os.path.join(xdg.BaseDirectory.save_config_path('jeff'), 'library.sqlite'))
		self._db = self._library._db

	#---------------------------------------------------------------------------
	# Public Methods
	#---------------------------------------------------------------------------

	def run(self, full=False, submode=''):
		concat = {}
		concat_reverse = {}

		with open('concat.txt') as f:
			for line in f:
				tokens = line.strip().split('\t')

				if tokens[0] == 'TITLE':
					title = tokens[1]
					concat[title] = []
				elif tokens[0] == 'TRACK':
					concat[title].append(tokens[1])
					concat_reverse[tokens[1]] = title
				elif tokens[0] == 'SKIP':
					concat_reverse[tokens[1]] = None

		if submode == 'asm':
			ranked_tracks = self._library.ranked_tracks_asm
		elif submode == 'bestfit':
			ranked_tracks = self._library.ranked_tracks_best_fit
		elif submode == 'elo':
			ranked_tracks = self._library.ranked_tracks_elo
		elif submode == 'bt':
			ranked_tracks = self._library.ranked_tracks_bt
		else:
			ranked_tracks = self._library.ranked_tracks

		for index, (rating, track) in enumerate(ranked_tracks):
			track_files = []
			title = None

			print('{:8.3f} {}'.format(rating, track.path))

			if track.mbid in concat_reverse:
				if concat_reverse[track.mbid] is not None:
					mbids = concat[concat_reverse[track.mbid]]
					title = concat_reverse[track.mbid]

					for mbid in mbids:
						files = sorted([(self._get_file_score(f), f) for f in self._db.execute('SELECT * FROM tracks t, files f WHERE t.mbid = ? AND t.id = f.track_id;', (mbid,)).fetchall()], reverse=True, key=lambda v: v[0])

						if len(files) > 0:
							track_files.append(files[0][1])

						concat_reverse[mbid] = None
			else:
				files = sorted([(self._get_file_score(f), f) for f in self._db.execute('SELECT * FROM tracks t, files f WHERE t.id = ? AND t.id = f.track_id;', (track.id,)).fetchall()], reverse=True, key=lambda v: v[0])

				if len(files) > 0:
					track_files.append(files[0][1])

			if len(track_files) > 0:
				yield title, track_files

	#---------------------------------------------------------------------------
	# Private Methods
	#---------------------------------------------------------------------------

	def _get_file_score(self, f):
		if f['path'].endswith('flac'):
			multiplier = 10
		else:
			multiplier = 1

		return os.path.getsize(f['path']) * f['priority'] * multiplier

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------


def format_size(size):
	if size < 1024:
		return ('{} B'.format(size))
	elif size < 1048576:
		return ('{:.2f} KiB'.format(size / 1024))
	elif size < 1024 * 1024 * 1024:
		return ('{:.2f} MiB'.format(size / 1024 / 1024))
	elif size < 1024 ** 4:
		return ('{:.2f} GiB'.format(size / 1024 / 1024 / 1024))


def sanitize(data):
	data = data.replace('"', '___DQ___')
	data = data.replace('*', '___AS___')
	data = data.replace('?', '___QM___')
	data = data.replace('<', '___LA___')
	data = data.replace('>', '___RA___')
	data = data.replace('|', '___PI___')
	data = data.replace(':', '___CO___')
	data = data.replace('$', '___ST___')
	data = data.replace('&', '___AM___')
	data = data.replace('./', '___FP___/')

	if data[-1] == '.':
		data = data[:-1] + '___FP___'

	if data[-1] == ' ':
		data = data[:-1] + '___FS___'

	return data


def desanitize(data):
	data = data.replace('___DQ___', '"')
	data = data.replace('___AS___', '*')
	data = data.replace('___AM___', '&')
	data = data.replace('___QM___', '?')
	data = data.replace('___LA___', '<')
	data = data.replace('___RA___', '>')
	data = data.replace('___PI___', '|')
	data = data.replace('___CO___', ':')
	data = data.replace('___ST___', '$')
	data = data.replace('___FP___', '.')
	data = data.replace('___FS___', ' ')
	return data


#-------------------------------------------------------------------------------
# Main Execution
#-------------------------------------------------------------------------------

if __name__ == '__main__':
	if len(sys.argv) < 4:
		print('USAGE: {} <mode> <maxsize> <base-path> <path>'.format(sys.argv[0]))
		exit(1)

	sorter = JeffSort()
	mode = sys.argv[1]
	max_size = int(sys.argv[2]) * 1048576
	base_directory = sys.argv[3]
	target_directory = sys.argv[4]

	tokens = mode.split('-')

	if len(tokens) > 1:
		mode = tokens[0]
		mode2 = tokens[1]
	else:
		mode2 = ''

	current_size = 0
	stored_files = []
	artists = {}
	albums = {}
	count = 0
	length = 0.0

	lowest_rating = 1000000

	updated = {}
	new = {}
	deleted = {}

	for rank, (title, flist) in enumerate(sorter.run(mode in ['export', 'print'], mode2), start=1):
		if mode == 'print':
			print('{:6} {}'.format(rank, flist[0]['path']))

			if len(flist) > 1:
				for entry in flist[1:]:
					print('{:6} + {}'.format('', entry['path']))

			continue

		if mode == 'albums':
			for f in flist:
				try:
					tags = mutagen.File(f['path'], easy=True)

					if not tags:
						continue

					if not tags['album']:
						continue

					album = tags['album'][0]

					if album not in albums:
						albums[album] = (0, 0)

					albums[album] = (albums[album][0] + 1, albums[album][1] + f['rating'])
				except KeyError as e:
					pass
			continue

		if mode == 'artists':
			for f in flist:
				tags = mutagen.File(f['path'], easy=True)

				if not tags:
					continue

				if not tags['artist']:
					continue

				artist = tags['artist'][0]

				if ' feat. ' in artist:
					artist = artist.split(' feat. ')[0]

				if ' with ' in artist:
					artist = artist.split(' with ')[0]

				try:
					if artist not in artists:
						artists[artist] = (0, 0)

					artists[artist] = (artists[artist][0] + 1, artists[artist][1] + rank)
				except KeyError as e:
					pass

			continue

		if current_size > max_size:
			break

		if flist[0]['rating'] < lowest_rating:
			lowest_rating = flist[0]['rating']

		if len(flist) > 1:
			# Join the files to a temporary file first.
			subprocess.call(['shntool', 'join', '-n', '-o', 'flac'] + [x['path'] for x in flist])

			# Transfer the metadata from the first file to the temporary file.
			tags = mutagen.File(flist[0]['path'], easy=True)
			ntags = mutagen.File('joined.flac', easy=True)

			ntags.add_picture(tags.pictures[0])
			for tag in tags:
				ntags[tag] = tags[tag]
			ntags['title'] = title
			ntags.save()

			# Preserve the original latest mtime.
			best = (None, None)

			for f in flist:
				if not best[0] or os.path.getmtime(f['path']) > best[0]:
					best = (os.path.getmtime(f['path']), f)

			shutil.copystat(best[1]['path'], 'joined.flac')

			source_path = 'joined.flac'
			target_path = flist[0]['path']
		else:
			source_path = flist[0]['path']
			target_path = flist[0]['path']

		if os.path.exists(source_path):
			matches = re.match('{}/(.*)/([^/]*)\.([^.]*)'.format(base_directory), target_path)

			directory = matches.group(1)
			filename = matches.group(2)
			extension = matches.group(3)

			tags = mutagen.File(source_path, easy=True)
			length += tags.info.length
			count += 1

			file_data = subprocess.check_output(['file', source_path]).decode('utf-8')
			encode = False

			if extension == 'flac' or 'layer II,' in file_data:
				encode = True
				new_filename = os.path.join(target_directory, directory, '{}.m4a'.format(filename))
			else:
				new_filename = os.path.join(target_directory, directory, '{}.{}'.format(filename, extension))

			if not os.path.isdir(os.path.join(target_directory, sanitize(directory))):
				os.makedirs(os.path.join(target_directory, sanitize(directory)))

			#print('Source Path', source_path)
			#print('New Filename', sanitize(new_filename))
			#print('Source mtime', os.path.getmtime(source_path))
			#print('New mtime', os.path.getmtime(sanitize(source_path)))
			#print('New exists', os.path.exists(sanitize(new_filename)))

			if os.path.exists(sanitize(new_filename)) and os.path.getmtime(sanitize(new_filename)) >= os.path.getmtime(source_path):
				print(f'Updating rank of {new_filename} to {rank}')
				current_size += os.path.getsize(sanitize(new_filename))
				stored_files.append(sanitize(new_filename))

				new_tags = mutagen.File(sanitize(new_filename), easy=True)
				matches = re.search('((?P<rank>[0-9]*): )?(?P<title>.*)', new_tags['title'][0])
				if matches.group('rank') != '{:04d}'.format(rank):
#					print(new_filename, new_tags['title'][0], matches.group('rank'), rank)
					updated[new_filename] = (int(matches.group('rank')), int(rank))
				new_tags['title'] = '{:04d}: {}'.format(rank, matches.group('title'))
				new_tags.save()

				if os.path.exists('joined.flac'):
					os.remove('joined.flac')

				continue

			if os.path.exists(sanitize(new_filename)):
				os.remove(sanitize(new_filename))

			if encode:
				new[sanitize(new_filename)] = (True, target_path, int(rank))

				if True: #extension == 'flac':
					#subprocess.call(['opusenc', '--bitrate=128', source_path, sanitize(new_filename)])
#					subprocess.call(['ffmpeg', '-i', source_path, '-c:v', 'copy', '-c:a', 'libmp3lame', '-q:a', '0', sanitize(new_filename)])
					subprocess.call(['ffmpeg', '-i', source_path, '-c:v', 'copy', '-c:a', 'libfdk_aac', '-vbr', '5', sanitize(new_filename)])
				else:
					subprocess.call(['sox', source_path, sanitize(new_filename)])
			else:
				new[sanitize(new_filename)] = (False, target_path, int(rank))
				subprocess.call(['cp', '-a', source_path, sanitize(new_filename)])

#				if extension == 'mp3':
#					subprocess.call(['mp3gain', '-r', '-k', '-d', '-5', sanitize(new_filename)])
#					apparently some files get messed up with -k
#					subprocess.call(['mp3gain', '-r', '-d', '-5', sanitize(new_filename)])


			new_tags = mutagen.File(sanitize(new_filename), easy=True)
			new_tags['title'] = '{:04d}: {}'.format(rank, new_tags['title'][0])
			new_tags.save()

			current_size += os.path.getsize(sanitize(new_filename))
			stored_files.append(sanitize(new_filename))

		if os.path.exists('joined.flac'):
			os.remove('joined.flac')

	if mode == 'print':
		pass
	elif mode == 'artists' or mode == 'albums':
		if mode == 'artists':
			source = artists
		else:
			source = albums

		ranks = [(key, value[1] / value[0], value[0]) for key, value in source.items()]

		for entry in sorted(ranks, key=lambda x: x[1]):
			if entry[2] > 5:
				print('{:80} {:.3f} {}'.format(entry[0], entry[1], entry[2]))

		print()

		for entry in sorted(ranks, key=lambda x: x[2], reverse=True):
			print('{:80} {}'.format(entry[0], entry[2]))
	else:
		for root, dirs, files in os.walk(target_directory, topdown=False):
			if root.endswith('.sync'):
				continue

			for filename in files:
				if filename in ['playlist.m3u', '.stfolder']:
					continue

				if os.path.join(root, filename) not in stored_files:
					deleted[filename] = True
					os.remove(os.path.join(root, filename))

			for dir in dirs:
				try:
					os.rmdir(os.path.join(root, dir))
					deleted[dir] = True
				except OSError:
					pass

		print()
		print('Summary:')
		print()
		print('Changed Files')
		print('-------------')

		for filename, (old_rank, new_rank) in sorted(updated.items(), key=lambda x: x[1][1]):
			old_rank, new_rank = updated[filename]
			print('{:5d}  {:4d} -> {:4d}: {:50}'.format(abs(old_rank - new_rank), old_rank, new_rank, filename))

		print()
		print('New Files')
		print('---------')

		for filename in sorted(new.keys()):
			encoded, original_filename, rank = new[filename]
			print('{:7}: {:4d} {:50}'.format('Encoded' if encoded else 'Copied', rank, filename))

		print()
		print('Deleted Files')
		print('-------------')

		for filename in sorted(deleted.keys()):
			print(filename)

		print()
		print('Stats')
		print('-----')
		print('Number of Tracks: {}'.format(count))
		print('Total Length: {}:{:02}:{:02}'.format(int(length / 3600), int(length / 60) % 60, int(length) % 60))
		print('Total filesize: {}'.format(format_size(current_size)))
		print('Lowest rating: {}'.format(lowest_rating))
